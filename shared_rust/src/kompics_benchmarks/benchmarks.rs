// This file is generated by rust-protobuf 2.8.2. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `benchmarks.proto`

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_8_2;

#[derive(PartialEq,Clone,Default)]
pub struct AtomicBroadcastRequest {
    // message fields
    pub algorithm: ::std::string::String,
    pub number_of_nodes: u64,
    pub duration_secs: u64,
    pub concurrent_proposals: u64,
    pub reconfiguration: ::std::string::String,
    pub reconfig_policy: ::std::string::String,
    pub network_scenario: ::std::string::String,
    pub election_timeout_ms: u64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a AtomicBroadcastRequest {
    fn default() -> &'a AtomicBroadcastRequest {
        <AtomicBroadcastRequest as ::protobuf::Message>::default_instance()
    }
}

impl AtomicBroadcastRequest {
    pub fn new() -> AtomicBroadcastRequest {
        ::std::default::Default::default()
    }

    // string algorithm = 1;


    pub fn get_algorithm(&self) -> &str {
        &self.algorithm
    }
    pub fn clear_algorithm(&mut self) {
        self.algorithm.clear();
    }

    // Param is passed by value, moved
    pub fn set_algorithm(&mut self, v: ::std::string::String) {
        self.algorithm = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_algorithm(&mut self) -> &mut ::std::string::String {
        &mut self.algorithm
    }

    // Take field
    pub fn take_algorithm(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.algorithm, ::std::string::String::new())
    }

    // uint64 number_of_nodes = 2;


    pub fn get_number_of_nodes(&self) -> u64 {
        self.number_of_nodes
    }
    pub fn clear_number_of_nodes(&mut self) {
        self.number_of_nodes = 0;
    }

    // Param is passed by value, moved
    pub fn set_number_of_nodes(&mut self, v: u64) {
        self.number_of_nodes = v;
    }

    // uint64 duration_secs = 3;


    pub fn get_duration_secs(&self) -> u64 {
        self.duration_secs
    }
    pub fn clear_duration_secs(&mut self) {
        self.duration_secs = 0;
    }

    // Param is passed by value, moved
    pub fn set_duration_secs(&mut self, v: u64) {
        self.duration_secs = v;
    }

    // uint64 concurrent_proposals = 4;


    pub fn get_concurrent_proposals(&self) -> u64 {
        self.concurrent_proposals
    }
    pub fn clear_concurrent_proposals(&mut self) {
        self.concurrent_proposals = 0;
    }

    // Param is passed by value, moved
    pub fn set_concurrent_proposals(&mut self, v: u64) {
        self.concurrent_proposals = v;
    }

    // string reconfiguration = 5;


    pub fn get_reconfiguration(&self) -> &str {
        &self.reconfiguration
    }
    pub fn clear_reconfiguration(&mut self) {
        self.reconfiguration.clear();
    }

    // Param is passed by value, moved
    pub fn set_reconfiguration(&mut self, v: ::std::string::String) {
        self.reconfiguration = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_reconfiguration(&mut self) -> &mut ::std::string::String {
        &mut self.reconfiguration
    }

    // Take field
    pub fn take_reconfiguration(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.reconfiguration, ::std::string::String::new())
    }

    // string reconfig_policy = 6;


    pub fn get_reconfig_policy(&self) -> &str {
        &self.reconfig_policy
    }
    pub fn clear_reconfig_policy(&mut self) {
        self.reconfig_policy.clear();
    }

    // Param is passed by value, moved
    pub fn set_reconfig_policy(&mut self, v: ::std::string::String) {
        self.reconfig_policy = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_reconfig_policy(&mut self) -> &mut ::std::string::String {
        &mut self.reconfig_policy
    }

    // Take field
    pub fn take_reconfig_policy(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.reconfig_policy, ::std::string::String::new())
    }

    // string network_scenario = 7;


    pub fn get_network_scenario(&self) -> &str {
        &self.network_scenario
    }
    pub fn clear_network_scenario(&mut self) {
        self.network_scenario.clear();
    }

    // Param is passed by value, moved
    pub fn set_network_scenario(&mut self, v: ::std::string::String) {
        self.network_scenario = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_network_scenario(&mut self) -> &mut ::std::string::String {
        &mut self.network_scenario
    }

    // Take field
    pub fn take_network_scenario(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.network_scenario, ::std::string::String::new())
    }

    // uint64 election_timeout_ms = 8;


    pub fn get_election_timeout_ms(&self) -> u64 {
        self.election_timeout_ms
    }
    pub fn clear_election_timeout_ms(&mut self) {
        self.election_timeout_ms = 0;
    }

    // Param is passed by value, moved
    pub fn set_election_timeout_ms(&mut self, v: u64) {
        self.election_timeout_ms = v;
    }
}

impl ::protobuf::Message for AtomicBroadcastRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.algorithm)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.number_of_nodes = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.duration_secs = tmp;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.concurrent_proposals = tmp;
                },
                5 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.reconfiguration)?;
                },
                6 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.reconfig_policy)?;
                },
                7 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.network_scenario)?;
                },
                8 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.election_timeout_ms = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.algorithm.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.algorithm);
        }
        if self.number_of_nodes != 0 {
            my_size += ::protobuf::rt::value_size(2, self.number_of_nodes, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.duration_secs != 0 {
            my_size += ::protobuf::rt::value_size(3, self.duration_secs, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.concurrent_proposals != 0 {
            my_size += ::protobuf::rt::value_size(4, self.concurrent_proposals, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.reconfiguration.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.reconfiguration);
        }
        if !self.reconfig_policy.is_empty() {
            my_size += ::protobuf::rt::string_size(6, &self.reconfig_policy);
        }
        if !self.network_scenario.is_empty() {
            my_size += ::protobuf::rt::string_size(7, &self.network_scenario);
        }
        if self.election_timeout_ms != 0 {
            my_size += ::protobuf::rt::value_size(8, self.election_timeout_ms, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.algorithm.is_empty() {
            os.write_string(1, &self.algorithm)?;
        }
        if self.number_of_nodes != 0 {
            os.write_uint64(2, self.number_of_nodes)?;
        }
        if self.duration_secs != 0 {
            os.write_uint64(3, self.duration_secs)?;
        }
        if self.concurrent_proposals != 0 {
            os.write_uint64(4, self.concurrent_proposals)?;
        }
        if !self.reconfiguration.is_empty() {
            os.write_string(5, &self.reconfiguration)?;
        }
        if !self.reconfig_policy.is_empty() {
            os.write_string(6, &self.reconfig_policy)?;
        }
        if !self.network_scenario.is_empty() {
            os.write_string(7, &self.network_scenario)?;
        }
        if self.election_timeout_ms != 0 {
            os.write_uint64(8, self.election_timeout_ms)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> AtomicBroadcastRequest {
        AtomicBroadcastRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "algorithm",
                    |m: &AtomicBroadcastRequest| { &m.algorithm },
                    |m: &mut AtomicBroadcastRequest| { &mut m.algorithm },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "number_of_nodes",
                    |m: &AtomicBroadcastRequest| { &m.number_of_nodes },
                    |m: &mut AtomicBroadcastRequest| { &mut m.number_of_nodes },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "duration_secs",
                    |m: &AtomicBroadcastRequest| { &m.duration_secs },
                    |m: &mut AtomicBroadcastRequest| { &mut m.duration_secs },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "concurrent_proposals",
                    |m: &AtomicBroadcastRequest| { &m.concurrent_proposals },
                    |m: &mut AtomicBroadcastRequest| { &mut m.concurrent_proposals },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "reconfiguration",
                    |m: &AtomicBroadcastRequest| { &m.reconfiguration },
                    |m: &mut AtomicBroadcastRequest| { &mut m.reconfiguration },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "reconfig_policy",
                    |m: &AtomicBroadcastRequest| { &m.reconfig_policy },
                    |m: &mut AtomicBroadcastRequest| { &mut m.reconfig_policy },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "network_scenario",
                    |m: &AtomicBroadcastRequest| { &m.network_scenario },
                    |m: &mut AtomicBroadcastRequest| { &mut m.network_scenario },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "election_timeout_ms",
                    |m: &AtomicBroadcastRequest| { &m.election_timeout_ms },
                    |m: &mut AtomicBroadcastRequest| { &mut m.election_timeout_ms },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<AtomicBroadcastRequest>(
                    "AtomicBroadcastRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static AtomicBroadcastRequest {
        static mut instance: ::protobuf::lazy::Lazy<AtomicBroadcastRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const AtomicBroadcastRequest,
        };
        unsafe {
            instance.get(AtomicBroadcastRequest::new)
        }
    }
}

impl ::protobuf::Clear for AtomicBroadcastRequest {
    fn clear(&mut self) {
        self.algorithm.clear();
        self.number_of_nodes = 0;
        self.duration_secs = 0;
        self.concurrent_proposals = 0;
        self.reconfiguration.clear();
        self.reconfig_policy.clear();
        self.network_scenario.clear();
        self.election_timeout_ms = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for AtomicBroadcastRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AtomicBroadcastRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x10benchmarks.proto\x12\x12kompics.benchmarks\x1a\x0emessages.proto\"\
    \xe4\x02\n\x16AtomicBroadcastRequest\x12\x1c\n\talgorithm\x18\x01\x20\
    \x01(\tR\talgorithm\x12&\n\x0fnumber_of_nodes\x18\x02\x20\x01(\x04R\rnum\
    berOfNodes\x12#\n\rduration_secs\x18\x03\x20\x01(\x04R\x0cdurationSecs\
    \x121\n\x14concurrent_proposals\x18\x04\x20\x01(\x04R\x13concurrentPropo\
    sals\x12(\n\x0freconfiguration\x18\x05\x20\x01(\tR\x0freconfiguration\
    \x12'\n\x0freconfig_policy\x18\x06\x20\x01(\tR\x0ereconfigPolicy\x12)\n\
    \x10network_scenario\x18\x07\x20\x01(\tR\x0fnetworkScenario\x12.\n\x13el\
    ection_timeout_ms\x18\x08\x20\x01(\x04R\x11electionTimeoutMs2\x90\x02\n\
    \x0fBenchmarkRunner\x12L\n\x05Ready\x12\x20.kompics.benchmarks.ReadyRequ\
    est\x1a!.kompics.benchmarks.ReadyResponse\x12P\n\x08Shutdown\x12#.kompic\
    s.benchmarks.ShutdownRequest\x1a\x1f.kompics.benchmarks.ShutdownAck\x12]\
    \n\x0fAtomicBroadcast\x12*.kompics.benchmarks.AtomicBroadcastRequest\x1a\
    \x1e.kompics.benchmarks.TestResultb\x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
