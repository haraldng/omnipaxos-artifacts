// This file is generated by rust-protobuf 2.8.2. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `benchmarks.proto`

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_8_2;

#[derive(PartialEq,Clone,Default)]
pub struct PingPongRequest {
    // message fields
    pub number_of_messages: u64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a PingPongRequest {
    fn default() -> &'a PingPongRequest {
        <PingPongRequest as ::protobuf::Message>::default_instance()
    }
}

impl PingPongRequest {
    pub fn new() -> PingPongRequest {
        ::std::default::Default::default()
    }

    // uint64 number_of_messages = 1;


    pub fn get_number_of_messages(&self) -> u64 {
        self.number_of_messages
    }
    pub fn clear_number_of_messages(&mut self) {
        self.number_of_messages = 0;
    }

    // Param is passed by value, moved
    pub fn set_number_of_messages(&mut self, v: u64) {
        self.number_of_messages = v;
    }
}

impl ::protobuf::Message for PingPongRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.number_of_messages = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.number_of_messages != 0 {
            my_size += ::protobuf::rt::value_size(1, self.number_of_messages, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.number_of_messages != 0 {
            os.write_uint64(1, self.number_of_messages)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> PingPongRequest {
        PingPongRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "number_of_messages",
                    |m: &PingPongRequest| { &m.number_of_messages },
                    |m: &mut PingPongRequest| { &mut m.number_of_messages },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<PingPongRequest>(
                    "PingPongRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static PingPongRequest {
        static mut instance: ::protobuf::lazy::Lazy<PingPongRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const PingPongRequest,
        };
        unsafe {
            instance.get(PingPongRequest::new)
        }
    }
}

impl ::protobuf::Clear for PingPongRequest {
    fn clear(&mut self) {
        self.number_of_messages = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for PingPongRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PingPongRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ThroughputPingPongRequest {
    // message fields
    pub messages_per_pair: u64,
    pub pipeline_size: u64,
    pub parallelism: u32,
    pub static_only: bool,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ThroughputPingPongRequest {
    fn default() -> &'a ThroughputPingPongRequest {
        <ThroughputPingPongRequest as ::protobuf::Message>::default_instance()
    }
}

impl ThroughputPingPongRequest {
    pub fn new() -> ThroughputPingPongRequest {
        ::std::default::Default::default()
    }

    // uint64 messages_per_pair = 1;


    pub fn get_messages_per_pair(&self) -> u64 {
        self.messages_per_pair
    }
    pub fn clear_messages_per_pair(&mut self) {
        self.messages_per_pair = 0;
    }

    // Param is passed by value, moved
    pub fn set_messages_per_pair(&mut self, v: u64) {
        self.messages_per_pair = v;
    }

    // uint64 pipeline_size = 2;


    pub fn get_pipeline_size(&self) -> u64 {
        self.pipeline_size
    }
    pub fn clear_pipeline_size(&mut self) {
        self.pipeline_size = 0;
    }

    // Param is passed by value, moved
    pub fn set_pipeline_size(&mut self, v: u64) {
        self.pipeline_size = v;
    }

    // uint32 parallelism = 3;


    pub fn get_parallelism(&self) -> u32 {
        self.parallelism
    }
    pub fn clear_parallelism(&mut self) {
        self.parallelism = 0;
    }

    // Param is passed by value, moved
    pub fn set_parallelism(&mut self, v: u32) {
        self.parallelism = v;
    }

    // bool static_only = 4;


    pub fn get_static_only(&self) -> bool {
        self.static_only
    }
    pub fn clear_static_only(&mut self) {
        self.static_only = false;
    }

    // Param is passed by value, moved
    pub fn set_static_only(&mut self, v: bool) {
        self.static_only = v;
    }
}

impl ::protobuf::Message for ThroughputPingPongRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.messages_per_pair = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.pipeline_size = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.parallelism = tmp;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.static_only = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.messages_per_pair != 0 {
            my_size += ::protobuf::rt::value_size(1, self.messages_per_pair, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.pipeline_size != 0 {
            my_size += ::protobuf::rt::value_size(2, self.pipeline_size, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.parallelism != 0 {
            my_size += ::protobuf::rt::value_size(3, self.parallelism, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.static_only != false {
            my_size += 2;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.messages_per_pair != 0 {
            os.write_uint64(1, self.messages_per_pair)?;
        }
        if self.pipeline_size != 0 {
            os.write_uint64(2, self.pipeline_size)?;
        }
        if self.parallelism != 0 {
            os.write_uint32(3, self.parallelism)?;
        }
        if self.static_only != false {
            os.write_bool(4, self.static_only)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ThroughputPingPongRequest {
        ThroughputPingPongRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "messages_per_pair",
                    |m: &ThroughputPingPongRequest| { &m.messages_per_pair },
                    |m: &mut ThroughputPingPongRequest| { &mut m.messages_per_pair },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "pipeline_size",
                    |m: &ThroughputPingPongRequest| { &m.pipeline_size },
                    |m: &mut ThroughputPingPongRequest| { &mut m.pipeline_size },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "parallelism",
                    |m: &ThroughputPingPongRequest| { &m.parallelism },
                    |m: &mut ThroughputPingPongRequest| { &mut m.parallelism },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                    "static_only",
                    |m: &ThroughputPingPongRequest| { &m.static_only },
                    |m: &mut ThroughputPingPongRequest| { &mut m.static_only },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ThroughputPingPongRequest>(
                    "ThroughputPingPongRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ThroughputPingPongRequest {
        static mut instance: ::protobuf::lazy::Lazy<ThroughputPingPongRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ThroughputPingPongRequest,
        };
        unsafe {
            instance.get(ThroughputPingPongRequest::new)
        }
    }
}

impl ::protobuf::Clear for ThroughputPingPongRequest {
    fn clear(&mut self) {
        self.messages_per_pair = 0;
        self.pipeline_size = 0;
        self.parallelism = 0;
        self.static_only = false;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ThroughputPingPongRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ThroughputPingPongRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct AtomicRegisterRequest {
    // message fields
    pub read_workload: f32,
    pub write_workload: f32,
    pub partition_size: u32,
    pub number_of_keys: u64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a AtomicRegisterRequest {
    fn default() -> &'a AtomicRegisterRequest {
        <AtomicRegisterRequest as ::protobuf::Message>::default_instance()
    }
}

impl AtomicRegisterRequest {
    pub fn new() -> AtomicRegisterRequest {
        ::std::default::Default::default()
    }

    // float read_workload = 1;


    pub fn get_read_workload(&self) -> f32 {
        self.read_workload
    }
    pub fn clear_read_workload(&mut self) {
        self.read_workload = 0.;
    }

    // Param is passed by value, moved
    pub fn set_read_workload(&mut self, v: f32) {
        self.read_workload = v;
    }

    // float write_workload = 2;


    pub fn get_write_workload(&self) -> f32 {
        self.write_workload
    }
    pub fn clear_write_workload(&mut self) {
        self.write_workload = 0.;
    }

    // Param is passed by value, moved
    pub fn set_write_workload(&mut self, v: f32) {
        self.write_workload = v;
    }

    // uint32 partition_size = 3;


    pub fn get_partition_size(&self) -> u32 {
        self.partition_size
    }
    pub fn clear_partition_size(&mut self) {
        self.partition_size = 0;
    }

    // Param is passed by value, moved
    pub fn set_partition_size(&mut self, v: u32) {
        self.partition_size = v;
    }

    // uint64 number_of_keys = 4;


    pub fn get_number_of_keys(&self) -> u64 {
        self.number_of_keys
    }
    pub fn clear_number_of_keys(&mut self) {
        self.number_of_keys = 0;
    }

    // Param is passed by value, moved
    pub fn set_number_of_keys(&mut self, v: u64) {
        self.number_of_keys = v;
    }
}

impl ::protobuf::Message for AtomicRegisterRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.read_workload = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.write_workload = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.partition_size = tmp;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.number_of_keys = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.read_workload != 0. {
            my_size += 5;
        }
        if self.write_workload != 0. {
            my_size += 5;
        }
        if self.partition_size != 0 {
            my_size += ::protobuf::rt::value_size(3, self.partition_size, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.number_of_keys != 0 {
            my_size += ::protobuf::rt::value_size(4, self.number_of_keys, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.read_workload != 0. {
            os.write_float(1, self.read_workload)?;
        }
        if self.write_workload != 0. {
            os.write_float(2, self.write_workload)?;
        }
        if self.partition_size != 0 {
            os.write_uint32(3, self.partition_size)?;
        }
        if self.number_of_keys != 0 {
            os.write_uint64(4, self.number_of_keys)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> AtomicRegisterRequest {
        AtomicRegisterRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                    "read_workload",
                    |m: &AtomicRegisterRequest| { &m.read_workload },
                    |m: &mut AtomicRegisterRequest| { &mut m.read_workload },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                    "write_workload",
                    |m: &AtomicRegisterRequest| { &m.write_workload },
                    |m: &mut AtomicRegisterRequest| { &mut m.write_workload },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "partition_size",
                    |m: &AtomicRegisterRequest| { &m.partition_size },
                    |m: &mut AtomicRegisterRequest| { &mut m.partition_size },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "number_of_keys",
                    |m: &AtomicRegisterRequest| { &m.number_of_keys },
                    |m: &mut AtomicRegisterRequest| { &mut m.number_of_keys },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<AtomicRegisterRequest>(
                    "AtomicRegisterRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static AtomicRegisterRequest {
        static mut instance: ::protobuf::lazy::Lazy<AtomicRegisterRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const AtomicRegisterRequest,
        };
        unsafe {
            instance.get(AtomicRegisterRequest::new)
        }
    }
}

impl ::protobuf::Clear for AtomicRegisterRequest {
    fn clear(&mut self) {
        self.read_workload = 0.;
        self.write_workload = 0.;
        self.partition_size = 0;
        self.number_of_keys = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for AtomicRegisterRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AtomicRegisterRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct StreamingWindowsRequest {
    // message fields
    pub number_of_partitions: u32,
    pub batch_size: u64,
    pub window_size: ::std::string::String,
    pub number_of_windows: u64,
    pub window_size_amplification: u64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a StreamingWindowsRequest {
    fn default() -> &'a StreamingWindowsRequest {
        <StreamingWindowsRequest as ::protobuf::Message>::default_instance()
    }
}

impl StreamingWindowsRequest {
    pub fn new() -> StreamingWindowsRequest {
        ::std::default::Default::default()
    }

    // uint32 number_of_partitions = 1;


    pub fn get_number_of_partitions(&self) -> u32 {
        self.number_of_partitions
    }
    pub fn clear_number_of_partitions(&mut self) {
        self.number_of_partitions = 0;
    }

    // Param is passed by value, moved
    pub fn set_number_of_partitions(&mut self, v: u32) {
        self.number_of_partitions = v;
    }

    // uint64 batch_size = 2;


    pub fn get_batch_size(&self) -> u64 {
        self.batch_size
    }
    pub fn clear_batch_size(&mut self) {
        self.batch_size = 0;
    }

    // Param is passed by value, moved
    pub fn set_batch_size(&mut self, v: u64) {
        self.batch_size = v;
    }

    // string window_size = 3;


    pub fn get_window_size(&self) -> &str {
        &self.window_size
    }
    pub fn clear_window_size(&mut self) {
        self.window_size.clear();
    }

    // Param is passed by value, moved
    pub fn set_window_size(&mut self, v: ::std::string::String) {
        self.window_size = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_window_size(&mut self) -> &mut ::std::string::String {
        &mut self.window_size
    }

    // Take field
    pub fn take_window_size(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.window_size, ::std::string::String::new())
    }

    // uint64 number_of_windows = 4;


    pub fn get_number_of_windows(&self) -> u64 {
        self.number_of_windows
    }
    pub fn clear_number_of_windows(&mut self) {
        self.number_of_windows = 0;
    }

    // Param is passed by value, moved
    pub fn set_number_of_windows(&mut self, v: u64) {
        self.number_of_windows = v;
    }

    // uint64 window_size_amplification = 5;


    pub fn get_window_size_amplification(&self) -> u64 {
        self.window_size_amplification
    }
    pub fn clear_window_size_amplification(&mut self) {
        self.window_size_amplification = 0;
    }

    // Param is passed by value, moved
    pub fn set_window_size_amplification(&mut self, v: u64) {
        self.window_size_amplification = v;
    }
}

impl ::protobuf::Message for StreamingWindowsRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.number_of_partitions = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.batch_size = tmp;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.window_size)?;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.number_of_windows = tmp;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.window_size_amplification = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.number_of_partitions != 0 {
            my_size += ::protobuf::rt::value_size(1, self.number_of_partitions, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.batch_size != 0 {
            my_size += ::protobuf::rt::value_size(2, self.batch_size, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.window_size.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.window_size);
        }
        if self.number_of_windows != 0 {
            my_size += ::protobuf::rt::value_size(4, self.number_of_windows, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.window_size_amplification != 0 {
            my_size += ::protobuf::rt::value_size(5, self.window_size_amplification, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.number_of_partitions != 0 {
            os.write_uint32(1, self.number_of_partitions)?;
        }
        if self.batch_size != 0 {
            os.write_uint64(2, self.batch_size)?;
        }
        if !self.window_size.is_empty() {
            os.write_string(3, &self.window_size)?;
        }
        if self.number_of_windows != 0 {
            os.write_uint64(4, self.number_of_windows)?;
        }
        if self.window_size_amplification != 0 {
            os.write_uint64(5, self.window_size_amplification)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> StreamingWindowsRequest {
        StreamingWindowsRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "number_of_partitions",
                    |m: &StreamingWindowsRequest| { &m.number_of_partitions },
                    |m: &mut StreamingWindowsRequest| { &mut m.number_of_partitions },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "batch_size",
                    |m: &StreamingWindowsRequest| { &m.batch_size },
                    |m: &mut StreamingWindowsRequest| { &mut m.batch_size },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "window_size",
                    |m: &StreamingWindowsRequest| { &m.window_size },
                    |m: &mut StreamingWindowsRequest| { &mut m.window_size },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "number_of_windows",
                    |m: &StreamingWindowsRequest| { &m.number_of_windows },
                    |m: &mut StreamingWindowsRequest| { &mut m.number_of_windows },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "window_size_amplification",
                    |m: &StreamingWindowsRequest| { &m.window_size_amplification },
                    |m: &mut StreamingWindowsRequest| { &mut m.window_size_amplification },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<StreamingWindowsRequest>(
                    "StreamingWindowsRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static StreamingWindowsRequest {
        static mut instance: ::protobuf::lazy::Lazy<StreamingWindowsRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const StreamingWindowsRequest,
        };
        unsafe {
            instance.get(StreamingWindowsRequest::new)
        }
    }
}

impl ::protobuf::Clear for StreamingWindowsRequest {
    fn clear(&mut self) {
        self.number_of_partitions = 0;
        self.batch_size = 0;
        self.window_size.clear();
        self.number_of_windows = 0;
        self.window_size_amplification = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for StreamingWindowsRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for StreamingWindowsRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct FibonacciRequest {
    // message fields
    pub fib_number: u32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a FibonacciRequest {
    fn default() -> &'a FibonacciRequest {
        <FibonacciRequest as ::protobuf::Message>::default_instance()
    }
}

impl FibonacciRequest {
    pub fn new() -> FibonacciRequest {
        ::std::default::Default::default()
    }

    // uint32 fib_number = 1;


    pub fn get_fib_number(&self) -> u32 {
        self.fib_number
    }
    pub fn clear_fib_number(&mut self) {
        self.fib_number = 0;
    }

    // Param is passed by value, moved
    pub fn set_fib_number(&mut self, v: u32) {
        self.fib_number = v;
    }
}

impl ::protobuf::Message for FibonacciRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.fib_number = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.fib_number != 0 {
            my_size += ::protobuf::rt::value_size(1, self.fib_number, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.fib_number != 0 {
            os.write_uint32(1, self.fib_number)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> FibonacciRequest {
        FibonacciRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "fib_number",
                    |m: &FibonacciRequest| { &m.fib_number },
                    |m: &mut FibonacciRequest| { &mut m.fib_number },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<FibonacciRequest>(
                    "FibonacciRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static FibonacciRequest {
        static mut instance: ::protobuf::lazy::Lazy<FibonacciRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const FibonacciRequest,
        };
        unsafe {
            instance.get(FibonacciRequest::new)
        }
    }
}

impl ::protobuf::Clear for FibonacciRequest {
    fn clear(&mut self) {
        self.fib_number = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for FibonacciRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for FibonacciRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ChameneosRequest {
    // message fields
    pub number_of_chameneos: u32,
    pub number_of_meetings: u64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ChameneosRequest {
    fn default() -> &'a ChameneosRequest {
        <ChameneosRequest as ::protobuf::Message>::default_instance()
    }
}

impl ChameneosRequest {
    pub fn new() -> ChameneosRequest {
        ::std::default::Default::default()
    }

    // uint32 number_of_chameneos = 1;


    pub fn get_number_of_chameneos(&self) -> u32 {
        self.number_of_chameneos
    }
    pub fn clear_number_of_chameneos(&mut self) {
        self.number_of_chameneos = 0;
    }

    // Param is passed by value, moved
    pub fn set_number_of_chameneos(&mut self, v: u32) {
        self.number_of_chameneos = v;
    }

    // uint64 number_of_meetings = 2;


    pub fn get_number_of_meetings(&self) -> u64 {
        self.number_of_meetings
    }
    pub fn clear_number_of_meetings(&mut self) {
        self.number_of_meetings = 0;
    }

    // Param is passed by value, moved
    pub fn set_number_of_meetings(&mut self, v: u64) {
        self.number_of_meetings = v;
    }
}

impl ::protobuf::Message for ChameneosRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.number_of_chameneos = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.number_of_meetings = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.number_of_chameneos != 0 {
            my_size += ::protobuf::rt::value_size(1, self.number_of_chameneos, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.number_of_meetings != 0 {
            my_size += ::protobuf::rt::value_size(2, self.number_of_meetings, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.number_of_chameneos != 0 {
            os.write_uint32(1, self.number_of_chameneos)?;
        }
        if self.number_of_meetings != 0 {
            os.write_uint64(2, self.number_of_meetings)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ChameneosRequest {
        ChameneosRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "number_of_chameneos",
                    |m: &ChameneosRequest| { &m.number_of_chameneos },
                    |m: &mut ChameneosRequest| { &mut m.number_of_chameneos },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "number_of_meetings",
                    |m: &ChameneosRequest| { &m.number_of_meetings },
                    |m: &mut ChameneosRequest| { &mut m.number_of_meetings },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ChameneosRequest>(
                    "ChameneosRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ChameneosRequest {
        static mut instance: ::protobuf::lazy::Lazy<ChameneosRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ChameneosRequest,
        };
        unsafe {
            instance.get(ChameneosRequest::new)
        }
    }
}

impl ::protobuf::Clear for ChameneosRequest {
    fn clear(&mut self) {
        self.number_of_chameneos = 0;
        self.number_of_meetings = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ChameneosRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ChameneosRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct APSPRequest {
    // message fields
    pub number_of_nodes: u32,
    pub block_size: u32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a APSPRequest {
    fn default() -> &'a APSPRequest {
        <APSPRequest as ::protobuf::Message>::default_instance()
    }
}

impl APSPRequest {
    pub fn new() -> APSPRequest {
        ::std::default::Default::default()
    }

    // uint32 number_of_nodes = 1;


    pub fn get_number_of_nodes(&self) -> u32 {
        self.number_of_nodes
    }
    pub fn clear_number_of_nodes(&mut self) {
        self.number_of_nodes = 0;
    }

    // Param is passed by value, moved
    pub fn set_number_of_nodes(&mut self, v: u32) {
        self.number_of_nodes = v;
    }

    // uint32 block_size = 2;


    pub fn get_block_size(&self) -> u32 {
        self.block_size
    }
    pub fn clear_block_size(&mut self) {
        self.block_size = 0;
    }

    // Param is passed by value, moved
    pub fn set_block_size(&mut self, v: u32) {
        self.block_size = v;
    }
}

impl ::protobuf::Message for APSPRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.number_of_nodes = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.block_size = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.number_of_nodes != 0 {
            my_size += ::protobuf::rt::value_size(1, self.number_of_nodes, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.block_size != 0 {
            my_size += ::protobuf::rt::value_size(2, self.block_size, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.number_of_nodes != 0 {
            os.write_uint32(1, self.number_of_nodes)?;
        }
        if self.block_size != 0 {
            os.write_uint32(2, self.block_size)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> APSPRequest {
        APSPRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "number_of_nodes",
                    |m: &APSPRequest| { &m.number_of_nodes },
                    |m: &mut APSPRequest| { &mut m.number_of_nodes },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "block_size",
                    |m: &APSPRequest| { &m.block_size },
                    |m: &mut APSPRequest| { &mut m.block_size },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<APSPRequest>(
                    "APSPRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static APSPRequest {
        static mut instance: ::protobuf::lazy::Lazy<APSPRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const APSPRequest,
        };
        unsafe {
            instance.get(APSPRequest::new)
        }
    }
}

impl ::protobuf::Clear for APSPRequest {
    fn clear(&mut self) {
        self.number_of_nodes = 0;
        self.block_size = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for APSPRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for APSPRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct AtomicBroadcastRequest {
    // message fields
    pub algorithm: ::std::string::String,
    pub number_of_nodes: u64,
    pub duration_secs: u64,
    pub concurrent_proposals: u64,
    pub reconfiguration: ::std::string::String,
    pub reconfig_policy: ::std::string::String,
    pub network_scenario: ::std::string::String,
    pub election_timeout_ms: u64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a AtomicBroadcastRequest {
    fn default() -> &'a AtomicBroadcastRequest {
        <AtomicBroadcastRequest as ::protobuf::Message>::default_instance()
    }
}

impl AtomicBroadcastRequest {
    pub fn new() -> AtomicBroadcastRequest {
        ::std::default::Default::default()
    }

    // string algorithm = 1;


    pub fn get_algorithm(&self) -> &str {
        &self.algorithm
    }
    pub fn clear_algorithm(&mut self) {
        self.algorithm.clear();
    }

    // Param is passed by value, moved
    pub fn set_algorithm(&mut self, v: ::std::string::String) {
        self.algorithm = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_algorithm(&mut self) -> &mut ::std::string::String {
        &mut self.algorithm
    }

    // Take field
    pub fn take_algorithm(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.algorithm, ::std::string::String::new())
    }

    // uint64 number_of_nodes = 2;


    pub fn get_number_of_nodes(&self) -> u64 {
        self.number_of_nodes
    }
    pub fn clear_number_of_nodes(&mut self) {
        self.number_of_nodes = 0;
    }

    // Param is passed by value, moved
    pub fn set_number_of_nodes(&mut self, v: u64) {
        self.number_of_nodes = v;
    }

    // uint64 duration_secs = 3;


    pub fn get_duration_secs(&self) -> u64 {
        self.duration_secs
    }
    pub fn clear_duration_secs(&mut self) {
        self.duration_secs = 0;
    }

    // Param is passed by value, moved
    pub fn set_duration_secs(&mut self, v: u64) {
        self.duration_secs = v;
    }

    // uint64 concurrent_proposals = 4;


    pub fn get_concurrent_proposals(&self) -> u64 {
        self.concurrent_proposals
    }
    pub fn clear_concurrent_proposals(&mut self) {
        self.concurrent_proposals = 0;
    }

    // Param is passed by value, moved
    pub fn set_concurrent_proposals(&mut self, v: u64) {
        self.concurrent_proposals = v;
    }

    // string reconfiguration = 5;


    pub fn get_reconfiguration(&self) -> &str {
        &self.reconfiguration
    }
    pub fn clear_reconfiguration(&mut self) {
        self.reconfiguration.clear();
    }

    // Param is passed by value, moved
    pub fn set_reconfiguration(&mut self, v: ::std::string::String) {
        self.reconfiguration = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_reconfiguration(&mut self) -> &mut ::std::string::String {
        &mut self.reconfiguration
    }

    // Take field
    pub fn take_reconfiguration(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.reconfiguration, ::std::string::String::new())
    }

    // string reconfig_policy = 6;


    pub fn get_reconfig_policy(&self) -> &str {
        &self.reconfig_policy
    }
    pub fn clear_reconfig_policy(&mut self) {
        self.reconfig_policy.clear();
    }

    // Param is passed by value, moved
    pub fn set_reconfig_policy(&mut self, v: ::std::string::String) {
        self.reconfig_policy = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_reconfig_policy(&mut self) -> &mut ::std::string::String {
        &mut self.reconfig_policy
    }

    // Take field
    pub fn take_reconfig_policy(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.reconfig_policy, ::std::string::String::new())
    }

    // string network_scenario = 7;


    pub fn get_network_scenario(&self) -> &str {
        &self.network_scenario
    }
    pub fn clear_network_scenario(&mut self) {
        self.network_scenario.clear();
    }

    // Param is passed by value, moved
    pub fn set_network_scenario(&mut self, v: ::std::string::String) {
        self.network_scenario = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_network_scenario(&mut self) -> &mut ::std::string::String {
        &mut self.network_scenario
    }

    // Take field
    pub fn take_network_scenario(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.network_scenario, ::std::string::String::new())
    }

    // uint64 election_timeout_ms = 8;


    pub fn get_election_timeout_ms(&self) -> u64 {
        self.election_timeout_ms
    }
    pub fn clear_election_timeout_ms(&mut self) {
        self.election_timeout_ms = 0;
    }

    // Param is passed by value, moved
    pub fn set_election_timeout_ms(&mut self, v: u64) {
        self.election_timeout_ms = v;
    }
}

impl ::protobuf::Message for AtomicBroadcastRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.algorithm)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.number_of_nodes = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.duration_secs = tmp;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.concurrent_proposals = tmp;
                },
                5 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.reconfiguration)?;
                },
                6 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.reconfig_policy)?;
                },
                7 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.network_scenario)?;
                },
                8 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.election_timeout_ms = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.algorithm.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.algorithm);
        }
        if self.number_of_nodes != 0 {
            my_size += ::protobuf::rt::value_size(2, self.number_of_nodes, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.duration_secs != 0 {
            my_size += ::protobuf::rt::value_size(3, self.duration_secs, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.concurrent_proposals != 0 {
            my_size += ::protobuf::rt::value_size(4, self.concurrent_proposals, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.reconfiguration.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.reconfiguration);
        }
        if !self.reconfig_policy.is_empty() {
            my_size += ::protobuf::rt::string_size(6, &self.reconfig_policy);
        }
        if !self.network_scenario.is_empty() {
            my_size += ::protobuf::rt::string_size(7, &self.network_scenario);
        }
        if self.election_timeout_ms != 0 {
            my_size += ::protobuf::rt::value_size(8, self.election_timeout_ms, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.algorithm.is_empty() {
            os.write_string(1, &self.algorithm)?;
        }
        if self.number_of_nodes != 0 {
            os.write_uint64(2, self.number_of_nodes)?;
        }
        if self.duration_secs != 0 {
            os.write_uint64(3, self.duration_secs)?;
        }
        if self.concurrent_proposals != 0 {
            os.write_uint64(4, self.concurrent_proposals)?;
        }
        if !self.reconfiguration.is_empty() {
            os.write_string(5, &self.reconfiguration)?;
        }
        if !self.reconfig_policy.is_empty() {
            os.write_string(6, &self.reconfig_policy)?;
        }
        if !self.network_scenario.is_empty() {
            os.write_string(7, &self.network_scenario)?;
        }
        if self.election_timeout_ms != 0 {
            os.write_uint64(8, self.election_timeout_ms)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> AtomicBroadcastRequest {
        AtomicBroadcastRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "algorithm",
                    |m: &AtomicBroadcastRequest| { &m.algorithm },
                    |m: &mut AtomicBroadcastRequest| { &mut m.algorithm },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "number_of_nodes",
                    |m: &AtomicBroadcastRequest| { &m.number_of_nodes },
                    |m: &mut AtomicBroadcastRequest| { &mut m.number_of_nodes },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "duration_secs",
                    |m: &AtomicBroadcastRequest| { &m.duration_secs },
                    |m: &mut AtomicBroadcastRequest| { &mut m.duration_secs },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "concurrent_proposals",
                    |m: &AtomicBroadcastRequest| { &m.concurrent_proposals },
                    |m: &mut AtomicBroadcastRequest| { &mut m.concurrent_proposals },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "reconfiguration",
                    |m: &AtomicBroadcastRequest| { &m.reconfiguration },
                    |m: &mut AtomicBroadcastRequest| { &mut m.reconfiguration },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "reconfig_policy",
                    |m: &AtomicBroadcastRequest| { &m.reconfig_policy },
                    |m: &mut AtomicBroadcastRequest| { &mut m.reconfig_policy },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "network_scenario",
                    |m: &AtomicBroadcastRequest| { &m.network_scenario },
                    |m: &mut AtomicBroadcastRequest| { &mut m.network_scenario },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "election_timeout_ms",
                    |m: &AtomicBroadcastRequest| { &m.election_timeout_ms },
                    |m: &mut AtomicBroadcastRequest| { &mut m.election_timeout_ms },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<AtomicBroadcastRequest>(
                    "AtomicBroadcastRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static AtomicBroadcastRequest {
        static mut instance: ::protobuf::lazy::Lazy<AtomicBroadcastRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const AtomicBroadcastRequest,
        };
        unsafe {
            instance.get(AtomicBroadcastRequest::new)
        }
    }
}

impl ::protobuf::Clear for AtomicBroadcastRequest {
    fn clear(&mut self) {
        self.algorithm.clear();
        self.number_of_nodes = 0;
        self.duration_secs = 0;
        self.concurrent_proposals = 0;
        self.reconfiguration.clear();
        self.reconfig_policy.clear();
        self.network_scenario.clear();
        self.election_timeout_ms = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for AtomicBroadcastRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AtomicBroadcastRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x10benchmarks.proto\x12\x12kompics.benchmarks\x1a\x0emessages.proto\"\
    ?\n\x0fPingPongRequest\x12,\n\x12number_of_messages\x18\x01\x20\x01(\x04\
    R\x10numberOfMessages\"\xaf\x01\n\x19ThroughputPingPongRequest\x12*\n\
    \x11messages_per_pair\x18\x01\x20\x01(\x04R\x0fmessagesPerPair\x12#\n\rp\
    ipeline_size\x18\x02\x20\x01(\x04R\x0cpipelineSize\x12\x20\n\x0bparallel\
    ism\x18\x03\x20\x01(\rR\x0bparallelism\x12\x1f\n\x0bstatic_only\x18\x04\
    \x20\x01(\x08R\nstaticOnly\"\xb0\x01\n\x15AtomicRegisterRequest\x12#\n\r\
    read_workload\x18\x01\x20\x01(\x02R\x0creadWorkload\x12%\n\x0ewrite_work\
    load\x18\x02\x20\x01(\x02R\rwriteWorkload\x12%\n\x0epartition_size\x18\
    \x03\x20\x01(\rR\rpartitionSize\x12$\n\x0enumber_of_keys\x18\x04\x20\x01\
    (\x04R\x0cnumberOfKeys\"\xf3\x01\n\x17StreamingWindowsRequest\x120\n\x14\
    number_of_partitions\x18\x01\x20\x01(\rR\x12numberOfPartitions\x12\x1d\n\
    \nbatch_size\x18\x02\x20\x01(\x04R\tbatchSize\x12\x1f\n\x0bwindow_size\
    \x18\x03\x20\x01(\tR\nwindowSize\x12*\n\x11number_of_windows\x18\x04\x20\
    \x01(\x04R\x0fnumberOfWindows\x12:\n\x19window_size_amplification\x18\
    \x05\x20\x01(\x04R\x17windowSizeAmplification\"1\n\x10FibonacciRequest\
    \x12\x1d\n\nfib_number\x18\x01\x20\x01(\rR\tfibNumber\"p\n\x10ChameneosR\
    equest\x12.\n\x13number_of_chameneos\x18\x01\x20\x01(\rR\x11numberOfCham\
    eneos\x12,\n\x12number_of_meetings\x18\x02\x20\x01(\x04R\x10numberOfMeet\
    ings\"T\n\x0bAPSPRequest\x12&\n\x0fnumber_of_nodes\x18\x01\x20\x01(\rR\r\
    numberOfNodes\x12\x1d\n\nblock_size\x18\x02\x20\x01(\rR\tblockSize\"\xe4\
    \x02\n\x16AtomicBroadcastRequest\x12\x1c\n\talgorithm\x18\x01\x20\x01(\t\
    R\talgorithm\x12&\n\x0fnumber_of_nodes\x18\x02\x20\x01(\x04R\rnumberOfNo\
    des\x12#\n\rduration_secs\x18\x03\x20\x01(\x04R\x0cdurationSecs\x121\n\
    \x14concurrent_proposals\x18\x04\x20\x01(\x04R\x13concurrentProposals\
    \x12(\n\x0freconfiguration\x18\x05\x20\x01(\tR\x0freconfiguration\x12'\n\
    \x0freconfig_policy\x18\x06\x20\x01(\tR\x0ereconfigPolicy\x12)\n\x10netw\
    ork_scenario\x18\x07\x20\x01(\tR\x0fnetworkScenario\x12.\n\x13election_t\
    imeout_ms\x18\x08\x20\x01(\x04R\x11electionTimeoutMs2\xbf\x08\n\x0fBench\
    markRunner\x12L\n\x05Ready\x12\x20.kompics.benchmarks.ReadyRequest\x1a!.\
    kompics.benchmarks.ReadyResponse\x12P\n\x08Shutdown\x12#.kompics.benchma\
    rks.ShutdownRequest\x1a\x1f.kompics.benchmarks.ShutdownAck\x12O\n\x08Pin\
    gPong\x12#.kompics.benchmarks.PingPongRequest\x1a\x1e.kompics.benchmarks\
    .TestResult\x12R\n\x0bNetPingPong\x12#.kompics.benchmarks.PingPongReques\
    t\x1a\x1e.kompics.benchmarks.TestResult\x12c\n\x12ThroughputPingPong\x12\
    -.kompics.benchmarks.ThroughputPingPongRequest\x1a\x1e.kompics.benchmark\
    s.TestResult\x12f\n\x15NetThroughputPingPong\x12-.kompics.benchmarks.Thr\
    oughputPingPongRequest\x1a\x1e.kompics.benchmarks.TestResult\x12[\n\x0eA\
    tomicRegister\x12).kompics.benchmarks.AtomicRegisterRequest\x1a\x1e.komp\
    ics.benchmarks.TestResult\x12_\n\x10StreamingWindows\x12+.kompics.benchm\
    arks.StreamingWindowsRequest\x1a\x1e.kompics.benchmarks.TestResult\x12Q\
    \n\tFibonacci\x12$.kompics.benchmarks.FibonacciRequest\x1a\x1e.kompics.b\
    enchmarks.TestResult\x12Q\n\tChameneos\x12$.kompics.benchmarks.Chameneos\
    Request\x1a\x1e.kompics.benchmarks.TestResult\x12W\n\x14AllPairsShortest\
    Path\x12\x1f.kompics.benchmarks.APSPRequest\x1a\x1e.kompics.benchmarks.T\
    estResult\x12]\n\x0fAtomicBroadcast\x12*.kompics.benchmarks.AtomicBroadc\
    astRequest\x1a\x1e.kompics.benchmarks.TestResultb\x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
